let styles = new WeakMap();

/**
 * Adopt CSS into a document or shadow root.
 * @param {string} css - The CSS to adopt.
 * @param {Object|Document|ShadowRoot} [options] - The options object. If a document or shadow root is provided, it will be used as the root.
 * @param {Document|ShadowRoot} [options.root=globalThis.document] - The document or shadow root to adopt the CSS into.
 * @param {boolean} [options.isolated=false] - Whether to create a new `<style>` element if adopted style sheets are not supported. Useful if you plan to modify or remove it later.
 * @returns {CSSStyleSheet} The adopted style sheet.
 */
export function adoptCSS (css, options = {}) {
	if (options?.constructor.name !== "Object") {
		options = { root: options };
	}

	// Ensure root is always a document
	let root = options.root?.getRootNode?.() ?? options.root ?? globalThis.document;
	let window = root.defaultView;

	if (root.adoptedStyleSheets) {
		let sheet = new window.CSSStyleSheet();
		sheet.replaceSync(css);

		if (Object.isFrozen(root.adoptedStyleSheets)) {
			root.adoptedStyleSheets = [...root.adoptedStyleSheets, sheet];
		}
		else {
			root.adoptedStyleSheets.push(sheet);
		}

		return sheet;
	}
	else {
		let parent = root.nodeType === Node.DOCUMENT_NODE ? root.head : root;
		let document = root.ownerDocument;
		let style = options.isolated ? null : styles.get(root);

		if (!style) {
			style = parent.appendChild(document.createElement("style"));

			if (!options.isolated) {
				styles.set(root, style);
			}
		}

		style.insertAdjacentText("beforeend", css);

		return style.sheet;
	}
}

export default adoptCSS;

/**
 * Remove a CSS style sheet generated by adoptCSS().
 * @param {CSSStyleSheet} sheet - The style sheet to remove.
 * @param {Document | ShadowRoot} root - The document or shadow root to remove the style sheet from.
 */
export function unadoptCSS (sheet, root) {
	root = root.getRootNode?.() ?? root ?? globalThis.document;

	if (sheet.ownerNode) {
		let style = sheet.ownerNode;
		style.remove();

		if (styles.get(root) === style) {
			styles.delete(root);
		}
	}
	else if (root.adoptedStyleSheets) {
		if (root.adoptedStyleSheets.includes(sheet)) {
			root.adoptedStyleSheets = root.adoptedStyleSheets.filter(s => s !== sheet);
		}
	}
}
